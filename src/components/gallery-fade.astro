---
type Props = {
  color?: "primary" | "secondary";
  class?: string;
  slidesPerView?: number;
};

const {
  color = "primary",
  class: _class,
  slidesPerView = 3,
} = Astro.props as Props;
---

<gallery-fade>
  <div
    class:list={["swiper", _class]}
    data-color={color}
    data-slides-per-view={slidesPerView}
  >
    <div class="swiper-wrapper">
      <slot />
    </div>

    <div class="swiper-pagination"></div>
    <div class="swiper-button-prev"></div>
    <div class="swiper-button-next"></div>
  </div>
</gallery-fade>

<style is:global>
  .swiper {
    --swiper-pagination-bullet-border-radius: 0;
    --swiper-pagination-bullet-width: 2rem;
    --swiper-pagination-bullet-height: 0.18rem;
    --swiper-pagination-bullet-inactive-opacity: 1;
    --swiper-pagination-bottom: 12px;
    --swiper-pagination-bullet-inactive-color: rgb(209 213 219);
  }
</style>

<script>
  import Swiper from "swiper";
  import "swiper/css";
  import "swiper/css/effect-fade";
  import "swiper/css/navigation";
  import "swiper/css/pagination";
  import { Navigation, Pagination } from "swiper/modules";

  class GalleryFade extends HTMLElement {
    #swiper: Swiper | undefined;

    constructor() {
      super();

      const element = this.querySelector(".swiper") as HTMLElement;
      const color = element.dataset.color as string;
      const configuredSlidesPerView = Number(
        element.dataset.slidesPerView as string,
      );
      const wrapper = element.querySelector(".swiper-wrapper") as HTMLElement;
      const next = element.querySelector(".swiper-button-next") as HTMLElement;
      const prev = element.querySelector(".swiper-button-prev") as HTMLElement;
      const pagination = element.querySelector(
        ".swiper-pagination",
      ) as HTMLElement;

      if (
        !element ||
        !element.children.length ||
        !wrapper ||
        !wrapper.children.length ||
        !pagination
      ) {
        return;
      }

      document.body.style.setProperty(
        "--swiper-pagination-color",
        `rgb(var(--color-${color}))`,
      );

      document.body.style.setProperty(
        "--swiper-navigation-color",
        `rgb(var(--color-${color}))`,
      );

      const slidesPerView =
        wrapper.children.length > configuredSlidesPerView
          ? configuredSlidesPerView
          : configuredSlidesPerView - 1;

      Array.from(wrapper.children).forEach((child) => {
        const div = document.createElement("div");
        div.classList.add("swiper-slide");

        div.appendChild(child);
        wrapper.appendChild(div);
      });

      this.#swiper = new Swiper(element, {
        modules: [Pagination, Navigation],

        effect: "fade",

        slidesPerView,
        loop: true,
        navigation: {
          nextEl: next,
          prevEl: prev,
        },

        pagination: {
          el: pagination,
          clickable: true,
        },
      });

      document.addEventListener(
        "astro:after-swap",
        this.updateSwiper.bind(this),
        { once: true },
      );
    }

    updateSwiper() {
      this.#swiper?.update();
    }
  }

  customElements.define("gallery-fade", GalleryFade);
</script>
